// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/repo/go/src/zopsmart/gofr-curd/store/interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"
	model "zopsmart/gofr-curd/model"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockProductstorer is a mock of Productstorer interface.
type MockProductstorer struct {
	ctrl     *gomock.Controller
	recorder *MockProductstorerMockRecorder
}

// MockProductstorerMockRecorder is the mock recorder for MockProductstorer.
type MockProductstorerMockRecorder struct {
	mock *MockProductstorer
}

// NewMockProductstorer creates a new mock instance.
func NewMockProductstorer(ctrl *gomock.Controller) *MockProductstorer {
	mock := &MockProductstorer{ctrl: ctrl}
	mock.recorder = &MockProductstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductstorer) EXPECT() *MockProductstorerMockRecorder {
	return m.recorder
}

// GetProductById mocks base method.
func (m *MockProductstorer) GetProductById(arg0 *gofr.Context, arg1 int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductstorerMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductstorer)(nil).GetProductById), arg0, arg1)
}
